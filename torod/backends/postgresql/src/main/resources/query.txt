
Resolver un field:
    Dado:
        el tipo Structure es o bien Array o bien Object

    Object :: resolver (List<String> fields) : Set<Value> {

        String fieldName = fields.get(0)
        Attribute att = this.getAttribute(fieldName)

        if (att == null) {
            return emptySet()
        }

        Value val = att.getValue()
        if (fields.size() == 1) {
            return Set(val)
        }
        
        if (val instanceof Structure) {
            return ((Structure) val).resolve(fields.subList(1))
        }
    }

    Array :: resolver (List<String> fields) : Set<Value> {
        Set<Value> result = emptySet()

        String fieldName = fields.get(0)
        Attribute att = this.getAttribute(fieldName)

        if (att != null) {
            Value val = att.getValue()
            if (fields.size() == 1) {
                result.add(val)
            }
            else {
                if (val instanceof Structure) {
                    Structure str = (Structure)vval
                    result.addAll(val.resolver(fields.subList(1))
                }
            }
        }

        for (Value val : this) {
            if (val instanceof Object) {
                Object obj = (Object) val
                result.addAll(obj.resolver(fields))
            }
        }
    }

Condiciones mongo (<cond>)
    + All: {}
    + And: {<expression>, <expression>}
    + Expressions (exp):
        · Equality condition {<field> : <value>}
            # Incluye igualdad de documentos: {person : {name: 'gonzalo', surname: 'ortiz'}}

        · field_expression (and-connected): {<field> : {$<field_op>: <value> (, $<field_op>: <value>)*}
            # donde <field_op> es por ejemplo: gte, neq, in...
        · iterator: {<field> : {$<it>: {<cond>(, <cond>)*}
            # donde 
                <cond> es cualquier condicion
                <it> es
                    + elemMatch
                        # se evalua como "existe elemento x que evalua todas las condiciones a true"
                    
            # su source tiene que ser un array
            
        · high_order_exp: {$<op>: [{<exp>} (,{<exp>})*]}
            # donde 
                <op> es por ejemplo: or, and...
                <exp> son expresiones
        · not:
            # la semántica de $not es high_order_exp, pero su sintaxis es propia:
                    {<field> : {$not: {$<field_op> : <value>}}}
                    Por ejemplo:
                        la sintaxis {"f1.f2.f3" : {$not: {$gte: 1}}}
                        tiene la semántica de {$not: [{"f1.f2.f3": {$gte: 1}}]}

Expresiones Mongo:
    Root        -> Exp*
    Exp         ->
                |  $and : [ Root ]
                |  $or  : [ Root ]
                |  $nor : [ Root ]
                |  AttRef : Value
                |  AttRef : {AttSubExp+}

    AttSubExp   -> $ AttKey : Value
                |  $ not : { AttSubExp+ }
                |  $ elemMatch : { Exp+ }
                |  $ elemMatch : { AttSubExp+ }

    AttKey      -> (noPoint)+

    AttRef      -> attKey (. attKey)*
    
    Value       -> integer
                   string
                   double
                   {(AttExp : Value)*}
                   [(Value)*]
                   ...


select * from "col_test"."t_4" join "col_test"."root" on "col_test"."t_4"."did" = "col_test"."root"."did" where (
    "col_test"."root"."sid" = 8 
    and "col_test"."t_4"."index" is null 
    and exists (
        select "value" from jsonb_array_elements(a_f1) 
            where value >= '1'
    )
);

select * from "col_test"."t_4" join "col_test"."root" on "col_test"."t_4"."did" = "col_test"."root"."did" where (
    "col_test"."root"."sid" = 9 
    and "col_test"."t_4"."index" is null 
    and exists (
        select "value" from jsonb_array_elements(a_f1) 
            where value >= '1'
    )
);

select * from "col_test"."t_4" join "col_test"."root" on "col_test"."t_4"."did" = "col_test"."root"."did" where (
    "col_test"."root"."sid" = 10 
    and "col_test"."t_4"."index" is null 
    and exists (
        select "value" from jsonb_array_elements(a_f1) 
            where value >= '1'
    )
);

select * from "col_test"."t_4" join "col_test"."root" on "col_test"."t_4"."did" = "col_test"."root"."did" where (
    "col_test"."root"."sid" = 13 
    and "col_test"."t_4"."index" is null 
    and exists (
        select "value" from jsonb_array_elements(a_f1) 
            where value >= '1'
    )
);